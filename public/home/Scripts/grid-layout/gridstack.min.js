!function (t) { "function" == typeof define && define.amd ? define(["jquery", "lodash"], t) : t(jQuery, _) }(function (_, l) { function d(t, i, e, n, o) { this.width = t, this.float = e || !1, this.height = n || 0, this.nodes = o || [], this.onchange = i || function () { }, this._update_counter = 0, this._float = this.float } var t = window, s = { is_intercepted: function (t, i) { return !(t.x + t.width <= i.x || i.x + i.width <= t.x || t.y + t.height <= i.y || i.y + i.height <= t.y) }, sort: function (t, i, e) { return e = e || l.chain(t).map(function (t) { return t.x + t.width }).max().value(), i = -1 != i ? 1 : -1, l.sortBy(t, function (t) { return i * (t.x + t.y * e) }) }, create_stylesheet: function (t) { var i = document.createElement("style"); return i.setAttribute("type", "text/css"), i.setAttribute("data-gs-id", t), i.styleSheet ? i.styleSheet.cssText = "" : i.appendChild(document.createTextNode("")), document.getElementsByTagName("head")[0].appendChild(i), i.sheet }, insert_css_rule: function (t, i, e, n) { "function" == typeof t.insertRule ? t.insertRule(i + "{" + e + "}", n) : "function" == typeof t.addRule && t.addRule(i, e, n) }, toBool: function (t) { return "boolean" == typeof t ? t : "string" == typeof t ? !("" == (t = t.toLowerCase()) || "no" == t || "false" == t || "0" == t) : Boolean(t) } }, o = 0; d.prototype.batch_update = function () { this._update_counter = 1, this.float = !0 }, d.prototype.commit = function () { (this._update_counter = 0) == this._update_counter && (this.float = this._float, this._pack_nodes(), this._notify()) }, d.prototype._fix_collisions = function (i) { this._sort_nodes(-1); var e = i, t = Boolean(l.find(this.nodes, function (t) { return t.locked })); for (this.float || t || (e = { x: 0, y: i.y, width: this.width, height: i.height }) ; ;) { var n = l.find(this.nodes, function (t) { return t != i && s.is_intercepted(t, e) }, this); if (void 0 === n) return; this.move_node(n, n.x, i.y + i.height, n.width, n.height, !0) } }, d.prototype.is_area_empty = function (t, i, e, n) { var o = { x: t || 0, y: i || 0, width: e || 1, height: n || 1 }; return null == l.find(this.nodes, function (t) { return s.is_intercepted(t, o) }, this) }, d.prototype._sort_nodes = function (t) { this.nodes = s.sort(this.nodes, t, this.width) }, d.prototype._pack_nodes = function () { this._sort_nodes(), this.float ? l.each(this.nodes, function (i, t) { if (!i._updating && void 0 !== i._orig_y && i.y != i._orig_y) for (var e = i.y; e >= i._orig_y;) { l.chain(this.nodes).find(function (t) { return i != t && s.is_intercepted({ x: i.x, y: e, width: i.width, height: i.height }, t) }).value() || (i._dirty = !0, i.y = e), --e } }, this) : l.each(this.nodes, function (i, t) { if (!i.locked) for (; 0 < i.y;) { var e = i.y - 1, n = 0 == t; if (0 < t) n = void 0 === l.chain(this.nodes).take(t).find(function (t) { return s.is_intercepted({ x: i.x, y: e, width: i.width, height: i.height }, t) }).value(); if (!n) break; i._dirty = i.y != e, i.y = e } }, this) }, d.prototype._prepare_node = function (t, i) { return (t = l.defaults(t || {}, { width: 1, height: 1, x: 0, y: 0 })).x = parseInt("" + t.x), t.y = parseInt("" + t.y), t.width = parseInt("" + t.width), t.height = parseInt("" + t.height), t.auto_position = t.auto_position || !1, t.no_resize = t.no_resize || !1, t.no_move = t.no_move || !1, t.width > this.width ? t.width = this.width : t.width < 1 && (t.width = 1), t.height < 1 && (t.height = 1), t.x < 0 && (t.x = 0), t.x + t.width > this.width && (i ? t.width = this.width - t.x : t.x = this.width - t.width), t.y < 0 && (t.y = 0), t }, d.prototype._notify = function () { if (!this._update_counter) { var t = Array.prototype.slice.call(arguments, 1).concat(this.get_dirty_nodes()); t = t.concat(this.get_dirty_nodes()), this.onchange(t) } }, d.prototype.clean_nodes = function () { l.each(this.nodes, function (t) { t._dirty = !1 }) }, d.prototype.get_dirty_nodes = function () { return l.filter(this.nodes, function (t) { return t._dirty }) }, d.prototype.add_node = function (i) { if (void 0 !== (i = this._prepare_node(i)).max_width && (i.width = Math.min(i.width, i.max_width)), void 0 !== i.max_height && (i.height = Math.min(i.height, i.max_height)), void 0 !== i.min_width && (i.width = Math.max(i.width, i.min_width)), void 0 !== i.min_height && (i.height = Math.max(i.height, i.min_height)), i._id = ++o, i._dirty = !0, i.auto_position) { this._sort_nodes(); for (var t = 0; ; ++t) { var e = t % this.width, n = Math.floor(t / this.width); if (!(e + i.width > this.width) && !l.find(this.nodes, function (t) { return s.is_intercepted({ x: e, y: n, width: i.width, height: i.height }, t) })) { i.x = e, i.y = n; break } } } return this.nodes.push(i), this._fix_collisions(i), this._pack_nodes(), this._notify(), i }, d.prototype.remove_node = function (t) { t._id = null, this.nodes = l.without(this.nodes, t), this._pack_nodes(), this._notify(t) }, d.prototype.can_move_node = function (i, t, e, n, o) { var s, a = Boolean(l.find(this.nodes, function (t) { return t.locked })); if (!this.height && !a) return !0; var h = new d(this.width, null, this.float, 0, l.map(this.nodes, function (t) { return t == i ? s = _.extend({}, t) : _.extend({}, t) })); h.move_node(s, t, e, n, o); var r = !0; return a && (r &= !Boolean(l.find(h.nodes, function (t) { return t != s && Boolean(t.locked) && Boolean(t._dirty) }))), this.height && (r &= h.get_grid_height() <= this.height), r }, d.prototype.can_be_placed_with_respect_to_height = function (t) { if (!this.height) return !0; var i = new d(this.width, null, this.float, 0, l.map(this.nodes, function (t) { return _.extend({}, t) })); return i.add_node(t), i.get_grid_height() <= this.height }, d.prototype.move_node = function (t, i, e, n, o, s) { if ("number" != typeof i && (i = t.x), "number" != typeof e && (e = t.y), "number" != typeof n && (n = t.width), "number" != typeof o && (o = t.height), void 0 !== t.max_width && (n = Math.min(n, t.max_width)), void 0 !== t.max_height && (o = Math.min(o, t.max_height)), void 0 !== t.min_width && (n = Math.max(n, t.min_width)), void 0 !== t.min_height && (o = Math.max(o, t.min_height)), t.x == i && t.y == e && t.width == n && t.height == o) return t; var a = t.width != n; return t._dirty = !0, t.x = i, t.y = e, t.width = n, t.height = o, t = this._prepare_node(t, a), this._fix_collisions(t), s || (this._pack_nodes(), this._notify()), t }, d.prototype.get_grid_height = function () { return l.reduce(this.nodes, function (t, i) { return Math.max(t, i.y + i.height) }, 0) }, d.prototype.begin_update = function (t) { l.each(this.nodes, function (t) { t._orig_y = t.y }), t._updating = !0 }, d.prototype.end_update = function () { l.each(this.nodes, function (t) { t._orig_y = t.y }); var t = l.find(this.nodes, function (t) { return t._updating }); t && (t._updating = !1) }; function i(t, i) { var e, n = this; this.container = _(t), i.item_class = i.item_class || "grid-stack-item"; var o = 0 < this.container.closest("." + i.item_class).size(); if (this.opts = l.defaults(i || {}, { width: parseInt(this.container.attr("data-gs-width")) || 12, height: parseInt(this.container.attr("data-gs-height")) || 0, item_class: "grid-stack-item", placeholder_class: "grid-stack-placeholder", handle: ".grid-stack-item-content", cell_height: 60, vertical_margin: 20, auto: !0, min_width: 768, float: !1, _class: "grid-stack-" + (1e4 * Math.random()).toFixed(0), animate: Boolean(this.container.attr("data-gs-animate")) || !1, always_show_resize_handle: i.always_show_resize_handle || !1, resizable: l.defaults(i.resizable || {}, { autoHide: !i.always_show_resize_handle, handles: "se" }), draggable: l.defaults(i.draggable || {}, { handle: ".grid-stack-item-content", scroll: !1, appendTo: "body" }) }), this.opts.is_nested = o, this.container.addClass(this.opts._class), o && this.container.addClass("grid-stack-nested"), this._init_styles(), this.grid = new d(this.opts.width, function (t) { var i = 0; l.each(t, function (t) { null == t._id ? t.el.remove() : (t.el.attr("data-gs-x", t.x).attr("data-gs-y", t.y).attr("data-gs-width", t.width).attr("data-gs-height", t.height), i = Math.max(i, t.y + t.height)) }), n._update_styles(i + 10) }, this.opts.float, this.opts.height), this.opts.auto) { var s = []; this.container.children("." + this.opts.item_class).each(function (t, i) { i = _(i), s.push({ el: i, i: parseInt(i.attr("data-gs-x")) + parseInt(i.attr("data-gs-y")) * parseInt(i.attr("data-gs-width")) }) }), l.chain(s).sortBy(function (t) { return t.i }).each(function (t) { n._prepare_element(t.el) }).value() } function a() { if (n._is_one_column_mode()) { if (e) return; e = !0, n.grid._sort_nodes(), l.each(n.grid.nodes, function (t) { n.container.append(t.el), t.no_move || t.el.draggable("disable"), t.no_resize || t.el.resizable("disable") }) } else { if (!e) return; e = !1, l.each(n.grid.nodes, function (t) { t.no_move || t.el.draggable("enable"), t.no_resize || t.el.resizable("enable") }) } } this.set_animation(this.opts.animate), this.placeholder = _('<div class="' + this.opts.placeholder_class + " " + this.opts.item_class + '"><div class="placeholder-content" /></div>').hide(), this.container.append(this.placeholder), this.container.height(this.grid.get_grid_height() * (this.opts.cell_height + this.opts.vertical_margin) - this.opts.vertical_margin), _(window).resize(a), a() } return i.prototype._init_styles = function () { this._styles_id && _('[data-gs-id="' + this._styles_id + '"]').remove(), this._styles_id = "gridstack-style-" + (1e5 * Math.random()).toFixed(), this._styles = s.create_stylesheet(this._styles_id), null != this._styles && (this._styles._max = 0) }, i.prototype._update_styles = function (t) { if (null != this._styles) { var i = "." + this.opts._class + " ." + this.opts.item_class; if (void 0 === t && (t = this._styles._max, this._init_styles(), this._update_container_height()), 0 == this._styles._max && s.insert_css_rule(this._styles, i, "min-height: " + this.opts.cell_height + "px;", 0), t > this._styles._max) { for (var e = this._styles._max; e < t; ++e) s.insert_css_rule(this._styles, i + '[data-gs-height="' + (e + 1) + '"]', "height: " + (this.opts.cell_height * (e + 1) + this.opts.vertical_margin * e) + "px;", e), s.insert_css_rule(this._styles, i + '[data-gs-min-height="' + (e + 1) + '"]', "min-height: " + (this.opts.cell_height * (e + 1) + this.opts.vertical_margin * e) + "px;", e), s.insert_css_rule(this._styles, i + '[data-gs-max-height="' + (e + 1) + '"]', "max-height: " + (this.opts.cell_height * (e + 1) + this.opts.vertical_margin * e) + "px;", e), s.insert_css_rule(this._styles, i + '[data-gs-y="' + e + '"]', "top: " + (this.opts.cell_height * e + this.opts.vertical_margin * e) + "px;", e); this._styles._max = t } } }, i.prototype._update_container_height = function () { this.grid._update_counter || this.container.height(this.grid.get_grid_height() * (this.opts.cell_height + this.opts.vertical_margin) - this.opts.vertical_margin) }, i.prototype._is_one_column_mode = function () { return _(window).width() <= this.opts.min_width }, i.prototype._prepare_element = function (t) { var a = this; (t = _(t)).addClass(this.opts.item_class); var h, r, d = a.grid.add_node({ x: t.attr("data-gs-x"), y: t.attr("data-gs-y"), width: t.attr("data-gs-width"), height: t.attr("data-gs-height"), max_width: t.attr("data-gs-max-width"), min_width: t.attr("data-gs-min-width"), max_height: t.attr("data-gs-max-height"), min_height: t.attr("data-gs-min-height"), auto_position: s.toBool(t.attr("data-gs-auto-position")), no_resize: s.toBool(t.attr("data-gs-no-resize")), no_move: s.toBool(t.attr("data-gs-no-move")), locked: s.toBool(t.attr("data-gs-locked")), el: t }); t.data("_gridstack_node", d); function i(t, i) { var e = _(this); a.grid.clean_nodes(), a.grid.begin_update(d), h = Math.ceil(e.outerWidth() / e.attr("data-gs-width")), r = a.opts.cell_height + a.opts.vertical_margin, a.placeholder.attr("data-gs-x", e.attr("data-gs-x")).attr("data-gs-y", e.attr("data-gs-y")).attr("data-gs-width", e.attr("data-gs-width")).attr("data-gs-height", e.attr("data-gs-height")).show(), d.el = a.placeholder } function e(t, i) { var e = _(this); d.el = e, a.placeholder.hide(), e.attr("data-gs-x", d.x).attr("data-gs-y", d.y).attr("data-gs-width", d.width).attr("data-gs-height", d.height).removeAttr("style"), a._update_container_height(), a.container.trigger("change", [a.grid.get_dirty_nodes()]), a.grid.end_update() } t.draggable(l.extend(this.opts.draggable, { start: i, stop: e, drag: function (t, i) { var e = Math.round(i.position.left / h), n = Math.floor((i.position.top + r / 2) / r); a.grid.can_move_node(d, e, n, d.width, d.height) && (a.grid.move_node(d, e, n), a._update_container_height()) }, containment: this.opts.is_nested ? this.container.parent() : null })).resizable(l.extend(this.opts.resizable, { start: i, stop: e, resize: function (t, i) { var e = Math.round(i.position.left / h), n = Math.floor((i.position.top + r / 2) / r), o = Math.round(i.size.width / h), s = Math.round(i.size.height / r); a.grid.can_move_node(d, e, n, o, s) && (a.grid.move_node(d, e, n, o, s), a._update_container_height()) } })), (d.no_move || this._is_one_column_mode()) && t.draggable("disable"), (d.no_resize || this._is_one_column_mode()) && t.resizable("disable"), t.attr("data-gs-locked", d.locked ? "yes" : null) }, i.prototype.set_animation = function (t) { t ? this.container.addClass("grid-stack-animate") : this.container.removeClass("grid-stack-animate") }, i.prototype.add_widget = function (t, i, e, n, o, s) { return t = _(t), void 0 !== i && t.attr("data-gs-x", i), void 0 !== e && t.attr("data-gs-y", e), void 0 !== n && t.attr("data-gs-width", n), void 0 !== o && t.attr("data-gs-height", o), void 0 !== s && t.attr("data-gs-auto-position", s ? "yes" : null), this.container.append(t), this._prepare_element(t), this._update_container_height(), t }, i.prototype.will_it_fit = function (t, i, e, n, o) { var s = { x: t, y: i, width: e, height: n, auto_position: o }; return this.grid.can_be_placed_with_respect_to_height(s) }, i.prototype.remove_widget = function (t, i) { i = void 0 === i || i; var e = (t = _(t)).data("_gridstack_node"); this.grid.remove_node(e), t.removeData("_gridstack_node"), this._update_container_height(), i && t.remove() }, i.prototype.remove_all = function (i) { l.each(this.grid.nodes, function (t) { this.remove_widget(t.el, i) }, this), this.grid.nodes = [], this._update_container_height() }, i.prototype.resizable = function (t, n) { return (t = _(t)).each(function (t, i) { var e = (i = _(i)).data("_gridstack_node"); void 0 !== e && null != e && (e.no_resize = !n, e.no_resize ? i.resizable("disable") : i.resizable("enable")) }), this }, i.prototype.movable = function (t, n) { return (t = _(t)).each(function (t, i) { var e = (i = _(i)).data("_gridstack_node"); void 0 !== e && null != e && (e.no_move = !n, e.no_move ? i.draggable("disable") : i.draggable("enable")) }), this }, i.prototype.disable = function () { this.movable(this.container.children("." + this.opts.item_class), !1), this.resizable(this.container.children("." + this.opts.item_class), !1) }, i.prototype.enable = function () { this.movable(this.container.children("." + this.opts.item_class), !0), this.resizable(this.container.children("." + this.opts.item_class), !0) }, i.prototype.locked = function (t, n) { return (t = _(t)).each(function (t, i) { var e = (i = _(i)).data("_gridstack_node"); void 0 !== e && null != e && (e.locked = n || !1, i.attr("data-gs-locked", e.locked ? "yes" : null)) }), this }, i.prototype._update_element = function (t, i) { var e = (t = _(t).first()).data("_gridstack_node"); if (void 0 !== e && null != e) { var n = this; n.grid.clean_nodes(), n.grid.begin_update(e), i.call(this, t, e), n._update_container_height(), n.container.trigger("change", [n.grid.get_dirty_nodes()]), n.grid.end_update() } }, i.prototype.resize = function (t, e, n) { this._update_element(t, function (t, i) { e = null != e && void 0 !== e ? e : i.width, n = null != n && void 0 !== n ? n : i.height, this.grid.move_node(i, i.x, i.y, e, n) }) }, i.prototype.move = function (t, e, n) { this._update_element(t, function (t, i) { e = null != e && void 0 !== e ? e : i.x, n = null != n && void 0 !== n ? n : i.y, this.grid.move_node(i, e, n, i.width, i.height) }) }, i.prototype.update = function (t, e, n, o, s) { this._update_element(t, function (t, i) { e = null != e && void 0 !== e ? e : i.x, n = null != n && void 0 !== n ? n : i.y, o = null != o && void 0 !== o ? o : i.width, s = null != s && void 0 !== s ? s : i.height, this.grid.move_node(i, e, n, o, s) }) }, i.prototype.cell_height = function (t) { if (void 0 === t) return this.opts.cell_height; (t = parseInt(t)) != this.opts.cell_height && (this.opts.cell_height = t || this.opts.cell_height, this._update_styles()) }, i.prototype.cell_width = function () { var t = this.container.children("." + this.opts.item_class).first(); return Math.ceil(t.outerWidth() / t.attr("data-gs-width")) }, i.prototype.get_cell_from_pixel = function (t) { var i = this.container.position(), e = t.left - i.left, n = t.top - i.top, o = Math.floor(this.container.width() / this.opts.width), s = this.opts.cell_height + this.opts.vertical_margin; return { x: Math.floor(e / o), y: Math.floor(n / s) } }, i.prototype.batch_update = function () { this.grid.batch_update() }, i.prototype.commit = function () { this.grid.commit(), this._update_container_height() }, i.prototype.is_area_empty = function (t, i, e, n) { return this.grid.is_area_empty(t, i, e, n) }, t.GridStackUI = i, t.GridStackUI.Utils = s, _.fn.gridstack = function (t) { return this.each(function () { _(this).data("gridstack") || _(this).data("gridstack", new i(this, t)) }) }, t.GridStackUI });
//# sourceMappingURL=gridstack.min.map